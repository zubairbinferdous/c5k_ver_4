<?php

namespace App\Http\Controllers;
use Illuminate\Support\Str;
use App\Journal;
use App\Editorial;
use App\ArticleCategory;
use Carbon\Carbon;
use App\Article;
use App\Banner;
use App\BlogBanner;
use App\Blog;
use App\News;
use App\EmailSubscriber;
use DB;

use Illuminate\Http\Request;

class PageController extends Controller
{
    public function news()
    {
        $newss = News::orderBy('id', 'desc')->get();
        return view('pages.all_news', compact('newss'));
    }
    public function news_details($id)
    {
        $news = News::findOrFail($id);
        return view('pages.news_details', compact('news'));
    }
    public function article()
    {
        $articles = Article::orderBy('id', 'desc')->get();
        return view('pages.all_article', compact('articles'));
    }
    public function article_details($id)
    {
        $articles = Article::findOrFail($id);
        return view('pages.article_details', compact('articles'));
    }
    public function papers()
    {
        return view('books');
    }

    public function blogs()
    {
        $blogs = Blog::orderBy('id', 'desc')->get();
        return view('pages.all_blogs', compact('blogs'));
    }
    public function blog_details($id)
    {
        $blogs = Blog::findOrFail($id);
        return view('pages.blog_details', compact('blogs'));
    }
public function current_issue($id)
{
    // Find the journal by ID
    $journal = Journal::findOrFail($id);

    // Fetch the volume list by joining with the journal_articles table
    $volume_list = DB::table('volume')
        ->join('journal_articals as ja', 'volume.journal_id', '=', 'ja.id')
        ->where('ja.id', $id) // Filter volumes based on journal ID
        ->select('volume.*') // Select all volume fields or specific ones if needed
        ->distinct() // Avoid duplicates if necessary
        ->get();


    return view('pages.current_issue', compact('journal', 'volume_list'));
}

public function current_issue_list($id, $volumeId)
{
    $journal = Journal::findOrFail($id);

    $volume_list_issue = DB::table('volume as v')
        ->join('articles as a', 'a.volume_id', '=', 'v.id')
        ->join('journal_articals as ja', 'v.journal_id', '=', 'ja.id')
        ->where('ja.id', $id)
        ->where('v.id', $volumeId)
        ->select('v.*', 'a.title as articles_title', 'a.id as issu_no')
        ->get();

    return view('pages.current_issue_list', compact('journal', 'volume_list_issue'));
}




public function single_issue($id, $volumeId, $issueId)
{
    // Fetch the journal details
    $journal = Journal::findOrFail($id);

    // Fetch the specific issue details
    $issuDetails = DB::table('articles')
        ->where('id', $issueId)
        ->first();

    // Fetch related issues from the same volume
    $relatedIssues = DB::table('articles')
        ->where('volume_id', $volumeId) // Same volume
        ->where('id', '!=', $issueId) // Exclude the current issue
        ->select('id', 'title', 'created_at') // Include additional fields if needed
        ->limit(3) // Limit to 3 related issues
        ->get();

    // Pass all necessary data to the view
    return view('pages.singleIssue', compact('journal', 'issuDetails', 'relatedIssues','volumeId'));
}


    public function article_press($id)
    {
        $journal = Journal::FindorFail($id);
        return view('pages.article_in_press', compact('journal'));
    }
    public function special_issue($id)
    {
        $journal = Journal::FindorFail($id);
        return view('pages.special_issues', compact('journal'));
    }
    public function all_issue($id)
    {
        $journal = Journal::FindorFail($id);
        return view('pages.all_issue', compact('journal'));
    }
    public function best_paper_awards($id)
    {
        $journal = Journal::FindorFail($id);
        return view('pages.best_paper_awards', compact('journal'));
    }

    public function journal_overview($id)
    {
        $journal = Journal::FindorFail($id);
        return view('pages.journal_overview', compact('journal'));
    }
    public function language_editing_service($id)
    {
        $journal = Journal::FindorFail($id);
        return view('pages.language_editing_service', compact('journal'));
    }

    public function call_for_papers($id)
    {
        $journal = Journal::FindorFail($id);
        return view('pages.call_for_papers', compact('journal'));
    }

    public function guide_for_aurthors($id)
    {
        $journal = Journal::FindorFail($id);
    
        return view('pages.guide_for_authors', compact('journal'));
    }

    public function subscriber(Request $request)
    {
        $request->validate([
            'email' => 'required|email',
        ]);
    
        // Store the email in the database
        $emailScriber = new EmailSubscriber();
        $emailScriber->email = $request->email;
        $emailScriber->save();

        return redirect()->back();
    
        
    }
}
